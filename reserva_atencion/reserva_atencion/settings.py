"""
Django settings for reserva_atencion project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import environ # variables de entorno
from pathlib import Path
from django.contrib.messages import constants as messages
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file

### environ ###
env = environ.Env()
environ.Env.read_env()  


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

# deploy
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '.fly.dev']
CSRF_TRUSTED_ORIGINS = ['https://*.fly.dev']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "main",
    "usuarios",
    "hospital",
    "crispy_forms",
    "crispy_bootstrap5",
    "feriados",
    "autenticacion",
    "contacto",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'reserva_atencion.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'reserva_atencion.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': "reserva_atencion",
#         "USER": "postgres",
#         "PASSWORD": "root",
#         "HOST": "127.0.0.1",
#         "DATABASE_PORT": "5432",
#     },

#     'feriados_db': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': "feriados",
#         "USER": "postgres",
#         "PASSWORD": "root",
#         "HOST": "127.0.0.1",
#         "DATABASE_PORT": "5432",
#     },
# }
DATABASES = {}
DATABASES["default"] = dj_database_url.config("DJANGO_URL_DB_DEFAULT")
DATABASES["feriados_db"] = dj_database_url.config("DJANGO_URL_DB_FERIADOS")



DATABASE_ROUTERS = ["reserva_atencion.routers.ReservaAtencionRouter"]

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'America/Santiago'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"] # necesario para el favicon

# deploy
STATIC_ROOT = BASE_DIR / 'staticfiles'

STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# media files
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Le decimos a django que use el usuario custom
AUTH_USER_MODEL = "usuarios.Usuario"


# carga el paquete crispy-forms en bootstrap
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"


# email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Cambia esto por el host de tu servidor de correo
EMAIL_PORT = 587  # Puerto de tu servidor de correo
EMAIL_USE_TLS = True  # True si tu servidor de correo usa TLS
EMAIL_HOST_USER = env('EMAIL_HOST_USER')  # Tu direcci칩n de correo electr칩nico
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')  # Tu contrase침a de correo electr칩nico


# redefinimos los tags para utilizar bootstrap
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-dark',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# expira la sesion
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 60000 # 10 minutos de session